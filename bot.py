import asyncio
import logging
import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
DB_DSN = os.getenv("DATABASE_URL")


bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

db_pool = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
async def create_db_pool():
    return await asyncpg.create_pool(dsn=DB_DSN)

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
async def init_db():
    async with db_pool.acquire() as conn:
        # volunteers
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS volunteers (
            id SERIAL PRIMARY KEY,
            full_name TEXT NOT NULL,
            contacts TEXT NOT NULL,
            status TEXT DEFAULT 'Active',
            lateness_count INT DEFAULT 0,
            warnings_count INT DEFAULT 0
        );
        """)
        # blacklist
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS blacklist (
            id SERIAL PRIMARY KEY,
            full_name TEXT NOT NULL,
            reason TEXT,
            added TIMESTAMP DEFAULT NOW(),
            UNIQUE(full_name)
        );
        """)

# --- FSM ---
class LatenessStates(StatesGroup):
    waiting_for_id = State()

class AddVolunteerStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_contact = State()

class EditVolunteerStates(StatesGroup):
    waiting_for_id = State()
    waiting_for_field = State()
    waiting_for_new_value = State()

class SearchVolunteerStates(StatesGroup):
    waiting_for_query = State()

class DeleteVolunteerStates(StatesGroup):
    waiting_for_id = State()
    confirm_delete = State()

class WarningStates(StatesGroup):
    waiting_for_id = State()

class BlacklistDirectStates(StatesGroup):
    waiting_for_id = State()
    waiting_for_reason = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –í–æ–ª–æ–Ω—Ç—ë—Ä—ã", callback_data="menu_volunteers"),
                InlineKeyboardButton(text="‚è∞ –û–ø–æ–∑–¥–∞–Ω–∏—è", callback_data="menu_lateness")
            ],
            [
                InlineKeyboardButton(text="‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏–µ", callback_data="menu_warning"),
                InlineKeyboardButton(text="üö´ –ß–° (–≤—Ä—É—á–Ω—É—é)", callback_data="menu_blacklist_direct")
            ],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="menu_add_volunteer"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="menu_edit_volunteer")
            ],
            [
                InlineKeyboardButton(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="menu_blacklist"),
                InlineKeyboardButton(text="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="menu_manage")
            ]
        ]
    )
    return kb

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é ---
def manage_menu():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_statistics"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="menu_search")
            ],
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞", callback_data="menu_delete_volunteer")
            ],
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")
            ]
        ]
    )
    return kb

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ---
async def get_volunteers():
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, full_name, status, contacts, lateness_count, warnings_count FROM volunteers ORDER BY id")
        return rows

async def get_blacklist():
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, full_name, reason, added FROM blacklist ORDER BY id")
        return rows

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
async def add_volunteer(full_name: str, contacts: str):
    async with db_pool.acquire() as conn:
        existing = await conn.fetchrow(
            "SELECT id FROM volunteers WHERE full_name=$1 AND contacts=$2",
            full_name, contacts
        )
        if existing:
            raise ValueError("–¢–∞–∫–æ–π –≤–æ–ª–æ–Ω—Ç—ë—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await conn.execute(
            "INSERT INTO volunteers (full_name, contacts) VALUES ($1, $2)",
            full_name, contacts
        )

# --- –ü–æ–¥—Å—á—ë—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π ---
async def check_and_blacklist(volunteer_id: int, message: types.Message):
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT id, full_name, lateness_count, warnings_count, status FROM volunteers WHERE id = $1",
            volunteer_id
        )
        if not row:
            await message.answer("‚ùå –í–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        total_violations = (row['lateness_count'] or 0) + (row['warnings_count'] or 0)

        if total_violations >= 3 and row['status'] != "Blacklisted":
            await conn.execute("UPDATE volunteers SET status = 'Blacklisted' WHERE id = $1", volunteer_id)
            await conn.execute(
                "INSERT INTO blacklist (full_name, reason) VALUES ($1, $2) ON CONFLICT DO NOTHING",
                row['full_name'], f"{total_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π (–æ–ø–æ–∑–¥–∞–Ω–∏—è + –∑–∞–º–µ—á–∞–Ω–∏—è)"
            )
            await message.answer(f"üö® –í–æ–ª–æ–Ω—Ç—ë—Ä {row['full_name']} –≤–Ω–µ—Å—ë–Ω –≤ –ß–°! ({total_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π)")
        else:
            await message.answer(
                f"‚ö† –ù–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {row['full_name']} "
                f"(–û–ø–æ–∑–¥–∞–Ω–∏–π: {row['lateness_count']}, –ó–∞–º–µ—á–∞–Ω–∏–π: {row['warnings_count']}, –í—Å–µ–≥–æ: {total_violations})"
            )

# --- –§–∏–∫—Å–∞—Ü–∏—è –æ–ø–æ–∑–¥–∞–Ω–∏—è ---
async def add_lateness(volunteer_id: int, message: types.Message):
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE volunteers SET lateness_count = lateness_count + 1 WHERE id = $1",
            volunteer_id
        )
    await check_and_blacklist(volunteer_id, message)

# --- –§–∏–∫—Å–∞—Ü–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è ---
async def add_warning(volunteer_id: int, message: types.Message):
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE volunteers SET warnings_count = warnings_count + 1 WHERE id = $1",
            volunteer_id
        )
    await check_and_blacklist(volunteer_id, message)

# --- –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ß–° ---
async def add_direct_blacklist(volunteer_id: int, reason: str, message: types.Message):
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT id, full_name, status FROM volunteers WHERE id = $1",
            volunteer_id
        )
        if not row:
            await message.answer("‚ùå –í–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await conn.execute("UPDATE volunteers SET status = 'Blacklisted' WHERE id = $1", volunteer_id)
        await conn.execute(
            "INSERT INTO blacklist (full_name, reason) VALUES ($1, $2) ON CONFLICT DO NOTHING",
            row['full_name'], reason
        )
        await message.answer(f"üö´ –í–æ–ª–æ–Ω—Ç—ë—Ä {row['full_name']} –≤–Ω–µ—Å—ë–Ω –≤ –ß–°. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# --- –ö–æ–ª–±—ç–∫–∏ ---
@dp.callback_query()
async def callbacks(query: types.CallbackQuery, state: FSMContext):
    if query.data == "menu_volunteers":
        rows = await get_volunteers()
        text = "–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:\n" if rows else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        for r in rows:
            text += f"{r['id']}. {r['full_name']} | {r['status']} | {r['contacts']} | –û–ø–æ–∑–¥–∞–Ω–∏–π: {r['lateness_count']} | –ó–∞–º–µ—á–∞–Ω–∏–π: {r['warnings_count']}\n"
        await query.message.edit_text(text, reply_markup=main_menu())

    elif query.data == "menu_lateness":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
        await state.set_state(LatenessStates.waiting_for_id)

    elif query.data == "menu_warning":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:")
        await state.set_state(WarningStates.waiting_for_id)

    elif query.data == "menu_blacklist":
        rows = await get_blacklist()
        text = "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" if rows else "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        for r in rows:
            text += f"{r['id']}. {r['full_name']} | –ü—Ä–∏—á–∏–Ω–∞: {r['reason']} | –î–æ–±–∞–≤–ª–µ–Ω: {r['added']}\n"
        await query.message.edit_text(text, reply_markup=main_menu())

    elif query.data == "menu_blacklist_direct":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°:")
        await state.set_state(BlacklistDirectStates.waiting_for_id)

    elif query.data == "menu_add_volunteer":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞:")
        await state.set_state(AddVolunteerStates.waiting_for_full_name)

    elif query.data == "menu_edit_volunteer":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await state.set_state(EditVolunteerStates.waiting_for_id)

    elif query.data == "menu_manage":
        await query.message.edit_text("‚öô –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_menu())

    elif query.data == "menu_statistics":
        async with db_pool.acquire() as conn:
            total = await conn.fetchval("SELECT COUNT(*) FROM volunteers")
            total_lates = await conn.fetchval("SELECT SUM(lateness_count) FROM volunteers")
            total_warnings = await conn.fetchval("SELECT SUM(warnings_count) FROM volunteers")
            blacklist_count = await conn.fetchval("SELECT COUNT(*) FROM volunteers WHERE status='Blacklisted'")
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤: {total}\n"
            f"–í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π: {total_lates or 0}\n"
            f"–í—Å–µ–≥–æ –∑–∞–º–µ—á–∞–Ω–∏–π: {total_warnings or 0}\n"
            f"–í –ß–°: {blacklist_count}"
        )
        await query.message.edit_text(text, reply_markup=manage_menu())

    elif query.data == "menu_search":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(SearchVolunteerStates.waiting_for_query)

    elif query.data == "menu_delete_volunteer":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(DeleteVolunteerStates.waiting_for_id)

    elif query.data == "menu_back":
        await query.message.edit_text("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif query.data == "confirm_delete_yes":
        data = await state.get_data()
        volunteer_id = data.get("volunteer_id")
        async with db_pool.acquire() as conn:
            await conn.execute("DELETE FROM volunteers WHERE id=$1", volunteer_id)
        await query.message.edit_text("üóë –í–æ–ª–æ–Ω—Ç—ë—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=manage_menu())
        await state.clear()

    elif query.data == "confirm_delete_no":
        await query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=manage_menu())
        await state.clear()

    elif query.data.startswith("edit_field_"):
        field = query.data.replace("edit_field_", "")
        await state.update_data(field=field)
        await state.set_state(EditVolunteerStates.waiting_for_new_value)
        await query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
        await query.answer()

# --- FSM –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
@dp.message()
async def handle_messages(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == LatenessStates.waiting_for_id.state:
        try:
            volunteer_id = int(message.text)
            await add_lateness(volunteer_id, message)
        except ValueError:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")
        finally:
            await state.clear()
            await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif current_state == WarningStates.waiting_for_id.state:
        try:
            volunteer_id = int(message.text)
            await add_warning(volunteer_id, message)
        except ValueError:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")
        finally:
            await state.clear()
            await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif current_state == BlacklistDirectStates.waiting_for_id.state:
        try:
            volunteer_id = int(message.text)
            await state.update_data(volunteer_id=volunteer_id)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –ß–°:")
            await state.set_state(BlacklistDirectStates.waiting_for_reason)
        except ValueError:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")

    elif current_state == BlacklistDirectStates.waiting_for_reason.state:
        data = await state.get_data()
        volunteer_id = data['volunteer_id']
        reason = message.text
        await add_direct_blacklist(volunteer_id, reason, message)
        await state.clear()
        await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif current_state == AddVolunteerStates.waiting_for_full_name.state:
        await state.update_data(full_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(AddVolunteerStates.waiting_for_contact)

    elif current_state == AddVolunteerStates.waiting_for_contact.state:
        data = await state.get_data()
        full_name = data.get("full_name")
        contacts = message.text
        try:
            await add_volunteer(full_name, contacts)
            await message.answer(f"‚úÖ –í–æ–ª–æ–Ω—Ç—ë—Ä {full_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError as ve:
            await message.answer(f"‚ö† {ve}")
        finally:
            await state.clear()
            await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif current_state == EditVolunteerStates.waiting_for_id.state:
        try:
            volunteer_id = int(message.text)
            await state.update_data(volunteer_id=volunteer_id)
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úèÔ∏è –§–ò–û", callback_data="edit_field_full_name"),
                        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_field_contacts")
                    ]
                ]
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
            await state.set_state(EditVolunteerStates.waiting_for_field)
        except ValueError:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")

    elif current_state == EditVolunteerStates.waiting_for_new_value.state:
        data = await state.get_data()
        volunteer_id = data['volunteer_id']
        field = data['field']
        new_value = message.text
        async with db_pool.acquire() as conn:
            await conn.execute(f"UPDATE volunteers SET {field}=$1 WHERE id=$2", new_value, volunteer_id)
        await message.answer(f"‚úÖ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")
        await state.clear()
        await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif current_state == SearchVolunteerStates.waiting_for_query.state:
        query_text = message.text.strip()
        async with db_pool.acquire() as conn:
            rows = await conn.fetch(
                "SELECT id, full_name, status, contacts, lateness_count, warnings_count FROM volunteers "
                "WHERE full_name ILIKE $1 OR contacts ILIKE $1",
                f"%{query_text}%"
            )
        if rows:
            text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            for r in rows:
                text += f"{r['id']}. {r['full_name']} | {r['status']} | {r['contacts']} | –û–ø–æ–∑–¥–∞–Ω–∏–π: {r['lateness_count']} | –ó–∞–º–µ—á–∞–Ω–∏–π: {r['warnings_count']}\n"
        else:
            text = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await message.answer(text, reply_markup=manage_menu())
        await state.clear()

    elif current_state == DeleteVolunteerStates.waiting_for_id.state:
        try:
            volunteer_id = int(message.text)
            async with db_pool.acquire() as conn:
                row = await conn.fetchrow("SELECT id, full_name FROM volunteers WHERE id=$1", volunteer_id)
            if not row:
                await message.answer("‚ùå –í–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=manage_menu())
                await state.clear()
            else:
                await state.update_data(volunteer_id=volunteer_id)
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_yes"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_delete_no")
                        ]
                    ]
                )
                await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {row['full_name']}?", reply_markup=kb)
                await state.set_state(DeleteVolunteerStates.confirm_delete)
        except ValueError:
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    global db_pool
    db_pool = await create_db_pool()
    logging.info("DB connected")

    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    await init_db()
    logging.info("Tables checked/created")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
